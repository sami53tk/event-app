name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  tests:
    name: Tests (PHP ${{ matrix.php-version }})
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-version: [8.2, 8.3]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick
        coverage: xdebug

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ~/.composer/cache/files
        key: dependencies-composer-${{ hashFiles('composer.json') }}

    - name: Install Composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Copy environment file
      run: cp .env.example .env

    - name: Generate application key
      run: php artisan key:generate

    - name: Set up test environment
      run: |
        echo "DB_CONNECTION=sqlite" >> .env
        echo "DB_DATABASE=:memory:" >> .env
        echo "MAIL_MAILER=array" >> .env
        echo "QUEUE_CONNECTION=sync" >> .env
        echo "STRIPE_KEY=pk_test_fake_key" >> .env
        echo "STRIPE_SECRET=sk_test_fake_secret" >> .env

    - name: Install NPM dependencies
      run: npm install

    - name: Build assets
      run: npm run build

    - name: Run tests with coverage
      run: php artisan test --coverage --min=70

    - name: Generate coverage report
      run: php artisan test --coverage-clover=coverage.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.3
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ~/.composer/cache/files
        key: dependencies-composer-${{ hashFiles('composer.json') }}

    - name: Install Composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Run Laravel Pint (Code Style)
      run: ./vendor/bin/pint --test

    - name: Install PHPStan
      run: composer require --dev phpstan/phpstan larastan/larastan --no-interaction

    - name: Create PHPStan config
      run: |
        cat > phpstan.neon << 'EOF'
        includes:
            - ./vendor/larastan/larastan/extension.neon

        parameters:
            paths:
                - app/
                - tests/
            level: 5
            ignoreErrors:
                - '#Call to an undefined method Illuminate\\Database\\Eloquent\\Builder#'
                - '#Call to an undefined method Illuminate\\Database\\Query\\Builder#'
        EOF

    - name: Run PHPStan
      run: ./vendor/bin/phpstan analyse --memory-limit=2G

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.3

    - name: Install Composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Run security audit
      run: composer audit

  # Deployment jobs will be added later when server configuration is ready
  # deploy-staging:
  #   name: Deploy to Staging
  #   needs: [tests, code-quality, security]
  #   if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
  #   runs-on: ubuntu-latest
  #   environment: staging
  #   steps:
  #     - name: Deploy to staging
  #       run: echo "Staging deployment will be configured later"
  #
  # deploy-production:
  #   name: Deploy to Production
  #   needs: [tests, code-quality, security]
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   runs-on: ubuntu-latest
  #   environment: production
  #   steps:
  #     - name: Deploy to production
  #       run: echo "Production deployment will be configured later"
